ca65 V2.17 - Git N/A
Main file   : ./src/a.s
Current file: ./src/a.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git N/A
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git N/A"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.forceimport	initmainargs
000000r 1               	.import		_cputsxy
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0006:
000000r 1  48 65 6C 6C  	.byte	$48,$65,$6C,$6C,$6F,$00
000004r 1  6F 00        
000006r 1               
000006r 1               ; ---------------------------------------------------------------
000006r 1               ; int __near__ __cdecl__ main (int, __near__ __near__ unsigned char * *)
000006r 1               ; ---------------------------------------------------------------
000006r 1               
000006r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  A9 0A        	lda     #$0A                 ; USE: ___________  CHG: __A________  SIZE: 2    In A:XX X:XX Y:XX  Out A:0A X:XX Y:XX
000002r 1  20 rr rr     	jsr     pusha                ; USE: __A________  CHG: ____Y______  SIZE: 3    In A:0A X:XX Y:XX  Out A:0A X:XX Y:XX
000005r 1  20 rr rr     	jsr     pusha                ; USE: __A________  CHG: ____Y______  SIZE: 3    In A:0A X:XX Y:XX  Out A:0A X:XX Y:XX
000008r 1  A9 rr        	lda     #<(L0006)            ; USE: ___________  CHG: __A________  SIZE: 2    In A:0A X:XX Y:XX  Out A:XX X:XX Y:XX
00000Ar 1  A2 rr        	ldx     #>(L0006)            ; USE: ___________  CHG: ___X_______  SIZE: 2    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
00000Cr 1  20 rr rr     	jsr     _cputsxy             ; USE: __AX_______  CHG: HLAXYT112VS  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
00000Fr 1  4C rr rr     L000A:	jmp     L000A                ; USE: ___________  CHG: ___________  SIZE: 3    In A:XX X:XX Y:XX  Out A:XX X:XX Y:XX
000012r 1               
000012r 1               .endproc
000012r 1               
000012r 1               
